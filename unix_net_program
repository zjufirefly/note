socket.h
	sockaddr
	int socket (int __domain, int __type, int __protocol)
	int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
	int listen (int __fd, int __n)
	int accept (int __fd, __SOCKADDR_ARG __addr, socklen_t *__restrict __addr_len)
	connect (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)

netinet/in.h
	sockaddr_in

unistd.h
	ssize_t write (int __fd, const void *__buf, size_t __n) 
	int close (int __fd)

sockaddr.h
	typedef unsigned short int sa_family_t;

string.h
	void bzero (void *__s, size_t __n) 





socket发送失败后如何知道socket是否断开

linux终端工具
	Terminator，可以新建tab，切分窗口，隐藏窗口
	guake热键呼出

信号
	SIGINT   2,Ctrl C
	SIGCHLD 17,子进程终止信号
	SIGKILL  9,不可捕获,不可忽略
	SIGSTOP 19,Ctrl Z不可捕获，不可忽略
	SIGPIPE 13,当一个进程向某个已收到RST的套接字执行写操作时，内核向该进程发送SIGPIPE信号
	SIGTERM 15,关机时init进程给所有进程发送SIGTERM信号，然后再给所有进程发送SIGKILL信号
	SIGIO	29,信号驱动IO


可移植问题
	1.处理信号后，被中断的慢系统调用行为不一致，有的系统返回错误EINTR，有的系统继续执行被中断的调用




客户端调用read后，如果服务端主机崩溃，客户端需要等待9分钟，返回错误为ETIMEDOUT，路由器判定不可达，返回destination unreadchable ICMP消息，返回错误为EHOSTUNREACH或ENETUNREACH。
为了不等待较长的时间，可以设置一个超时，在unp14.2节。

在发送数据时才可以检测出服务器崩溃，为了在不主动发送数据时也能检测出，需要使用SO_KEEPALIVE套接字选项，在unp7.5节

服务器进程终止，客户端使用select，poll
服务器主机崩溃，导致read阻塞9分钟，使用SO_KEEPALIVE套接字选项解决
服务器主机崩溃后重启，read返回错误为ECONNRESET，使用SO_KEEPALIVE套接字选项解决
服务器主机关机，服务端捕获SIGTERM函数进行处理，服务端未处理，客户端通过select，poll解决


如何获取MSL（最长分节生命期）


socket问题
FIN
	收到FIN意味对端不会再发送数据。本端read函数返回0。 
		收到FIN之前有丢包该如何处理？
	进程终止时，进程打开的套接字由内核关闭，发送FIN。
	收到FIN以后，如何确保将剩余数据发送到对端？

信号
	1.fork子进程在终止时会发送SIGCHLD信号给父进程。如果父进程不处理该信号，则子进程变为僵尸进程，父进程需要处理SIGCHLD信号，调用wait函数。
	

	2.信号会使阻塞与慢系统调用的函数返回，产生EINTR错误。有些系统会自动重启被中断的系统调用，由些不会，确认linux是否会？（linux会重启系统调用）
		解决方法：为了被中断的系统调用，将系统调用放入到for循环，出现EINTR错误后再次调用系统调用。
		for (;;) {
			if ( (connfd = accept() < 0)
				if (EINTR == errno) {
					contiunue;
				}
			else
				syslog();
		}
		connect函数被信号终端后不能重新启动，如果再次调用，立即返回错误。connect被信号中断时，我们必须调用select等待连接完成。16.3节

	3.调用wait造成多个子进程退出时，只有一个被处理。信号不排队问题。
		解决方法：使用waitpid以非阻塞方式多次调用

	signal函数不同平台实现不同

accept
	1.信号会使阻塞与慢系统调用的函数返回，产生EINTR错误。有些系统会自动重启被中断的系统调用，由些不会，确认linux是否会？（linux会重启系统调用）
	  支持SA_RESTART标志的系统可能对某些系统调用不支持重启
	2.3次握手完成，连接建立后，客户发送RST（复位）。处理这种问题以来不同实现。SVR返回EPROTO错误，posix指出必须返回ECONNABORTED错误。
	  解决方法：判断错误号，再次调用accept

客户端fgets，read阻塞在同一终端
	1.客户端阻塞在fgets，服务器终止。服务端终止后，发送FIN，客户端回ACK。服务端进程终止后客户端再发送数据后，服务端响应RST。
	  客户端再调用read在收到RST之前时，read返回EOF,在RST之后时，返回ECONNRESET错误。
	  解决方法：使用select poll

	2.服务端终止后，客户端发送数据将收到RST，再次发送数据将收到SIGPIPE信号(默认关闭程序)。写操作返回EPIPE错误。
	  解决方法:相应对信号SIGPIPE的处理,或者忽略对信号SIGPIPE处理,判断返回的EPIPE.

服务器主机崩溃，导致read阻塞9分钟，使用SO_KEEPALIVE套接字选项解决	  
	read返回EHOSTUNREACH或ENETUNREACH。
	只有在发送数据时才知道错误，
	解决方法:使用SO_KEEPALIVE选项。

服务器崩溃后重启
	收到RST,read返回ECONNRESET错误。
	解决方法:使用SO_KEEPALIVE套接字选项。

使用select导致批量输入问题
	解决方法:发送完程序不推出,直到接收返回EOF。

拒绝服务攻击
	客户端发送一个字节后休眠，导致服务端挂起。
	解决方法：使用非阻塞式IO，让每个客户单独一个线程，对IO设置超时。


调试已启动的进程
gdb processname pid

生成core文件，gcore corefilename


udp
1.client可能接受到非服务器相应的消息
	解决方法:recvfrom中获取地址,判断是否有服务端发送来.

2.client根据服务端地址过滤消息,服务端具有多个ip地址时,服务端可能选择某个地址发送,导致被客户端过滤
	解决方法:1.客户端通过DNS查询主机名确认.
		  2.UDP服务器给每个ip地址创建套接字.有接受到消息的套接字发送数据.

3.服务端未启动
	recvfrom将被永久阻塞.
		解决方法:1.设置超时值,如何设置?
	sendto将返回icmp异步消息,但是不会通知到进程.
		解决方法:需要udp使用connect连接到对端后才返回给进程.


socket协议无关
1,不使用gethostbyname,gethostbyaddr调用,改用getaddrinfo,getnameinfo


守护进程
rc
 |-inetd
 |   |-网络程序
 |-cron (at命令进行添加删除)
 |-syslogd























