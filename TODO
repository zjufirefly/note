IO处理单元
	四种io模型
		阻塞IO
		IO复用
		SIGIO
		异步IO

	两种事件处理模式
		reactor(同步)
		proactor：主线程进行异步读写，相应事件后选择工作线程处理

逻辑处理单元
	两种高效并发模式
		半同步/半异步
		领导者，追随者模式

tcp参数
	连接阶段（应对SYN Flood攻击）
		tcp_synack_retries 可以用他来减少重试次数
		tcp_max_syn_backlog，可以增大SYN连接数
		tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了

	TIME_WAIT数量太多
		大并发的短链接下，TIME_WAIT 就会太多，这也会消耗很多系统资源
		tcp_tw_reuse，必需设置tcp_timestamps=1
		tcp_tw_recycle
		tcp_max_tw_buckets。这个是控制并发的TIME_WAIT的数量，默认值是180000

DDoS攻击：
	一些攻击者会在和HTTP建好链发完GET请求后，就把Window设置为0，然后服务端就只能等待进行ZWP，于是攻击者会并发大量的这样的请求，把服务器端的资源耗尽。
	有的TCP实现就会发RST把链接断了。

糊涂窗口综合症：
	避免对小的window size做出响应，直到有足够大的window size再响应，这个思路可以同时实现在sender和receiver两端。
	在receiver端，如果收到的数据导致window size小于某个值，可以直接ack(0)回sender，这样就把window给关闭了，也阻止了sender再发数据过来，等到receiver端处理了一些数据后windows size 大于等于了MSS，或者，receiver buffer有一半为空，就可以把window打开让send 发送数据过来。
	如果这个问题是由Sender端引起的，那么就会使用著名的Nagle’s algorithm。这个算法的思路也是延时处理，他有两个主要的条件（更多的条件可以看一下tcp_nagle_check函数）：1）要等到 Window Size>=MSS 或是 Data Size >=MSS，2）等待时间或是超时200ms，这两个条件有一个满足，他才会发数据，否则就是在攒数据。


MSL
	RFC793定义了MSL为2分钟，Linux设置成了30s
	为什么不直接给转成CLOSED状态呢？主要有两个原因：
	1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发被动端重发Fin，一来一去正好2个MSL，
	2）有足够的时间让这个连接不会跟后面的连接混在一起（你要知道，有些自做主张的路由器会缓存IP数据包，如果连接被重用了，那么这些延迟收到的包就有可能会跟新连接混在一起）。

TCP重传机制
	超时重传机制
		一种是仅重传timeout的包
		一种是重传timeout后所有的数据
	快速重传机制
	SACK Selective Acknowledgment
		tcp_sack参数打开这个功能

TCP的RTT算法

TCP的流量控制
	TCP滑动窗口
	TCP滑动窗口，零窗口
		解决发送非0窗口报文丢失问题（发送端发送零窗口探测报文段）



TCP的拥塞处理
	流控
		滑窗
	慢启动
		连接建好的开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。
		每当收到一个ACK，cwnd++; 呈线性上升
		每当过了一个RTT，cwnd = cwnd*2; 呈指数让升
		还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）

	拥塞避免
		cwnd >= ssthresh时，就会进入“拥塞避免算法”。一般来说ssthresh的值是65535，单位是字节，当cwnd达到这个值时后，算法如下：
		收到一个ACK时，cwnd = cwnd + 1/cwnd
		当每过一个RTT时，cwnd = cwnd + 1
		这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。

	拥塞发生
		当丢包的时候，会有两种情况：
		1）等到RTO超时，重传数据包。TCP认为这种情况太糟糕，反应也很强烈。
			sshthresh = cwnd /2
    			cwnd 重置为 1
    			进入慢启动过程
		2）Fast Retransmit算法，也就是在收到3个duplicate ACK时就开启重传，而不用等到RTO超时。
			TCP Tahoe的实现和RTO超时一样。
			TCP Reno的实现是：
				cwnd = cwnd /2
				sshthresh = cwnd
				进入快速恢复算法——Fast Recovery


	快速恢复

重复收到数据的问题









clock函数

syslog

事件处理模式
	reactor模式	反应器模式	同步IO
		它要求主线程只负责监听文件描述符上是否有事件发生，有的话就立即将事件通知工作线程。除此之外，主线程不做任何其他实质性工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。

	Proactor模式	主动器模式	异步IO
		Procator模式将所有IO操作均交给主线程内核来处理，工作线程仅仅负责业务逻辑。


程序如何获取本地ip地址


在Linux 2.4和Linux 2.6之间，线程的实现变为Native POSIX Thread Library（NPTL）。


gdb调试多线程,查看coredump的多个线程的调用栈.

会话

gitk
http://blog.csdn.net/jfkidear/article/details/14106699


list.splice练习
stl6.8 智能指针练习
复习stl异常，5.11.2节，p139页．6.10.10节,p249页


流操作符重载p600
operator void*
operator !

liepin

nio java


socket面试
http://www.itmian4.com/
http://blog.csdn.net/lizhi200404520/article/details/7075318
http://blog.csdn.net/adrianfeng/article/details/6265345
tcp ip参数设置
http://blog.csdn.net/lizhi200404520/article/details/6981272

new
http://blog.csdn.net/wudaijun/article/details/9273339
new (p) T1(value)

value_type
__type_traits


c++ enum

http://www.kanzhun.com/gsx15905.html



http://www.chuanke.com


java 多线程，并发，NIO，网络

linux网络异步同步
http://blog.chinaunix.net/uid-26000296-id-3755264.html
http://www.cnblogs.com/Anker/p/3254269.html

aio













